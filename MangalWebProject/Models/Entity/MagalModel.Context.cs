//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MangalWebProject.Models.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MangalDBEntities : DbContext
    {
        public MangalDBEntities()
            : base("name=MangalDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbl_Menu> tbl_Menu { get; set; }
        public virtual DbSet<u_userauthorization> u_userauthorization { get; set; }
        public virtual DbSet<tbl_Payment> tbl_Payment { get; set; }
        public virtual DbSet<tbl_User> tbl_User { get; set; }
        public virtual DbSet<tbl_UserCategory> tbl_UserCategory { get; set; }
        public virtual DbSet<Mst_City> Mst_City { get; set; }
        public virtual DbSet<Mst_Country> Mst_Country { get; set; }
        public virtual DbSet<Mst_PinCode> Mst_PinCode { get; set; }
        public virtual DbSet<Mst_State> Mst_State { get; set; }
        public virtual DbSet<Mst_Zone> Mst_Zone { get; set; }
        public virtual DbSet<Mst_SourceofApplication> Mst_SourceofApplication { get; set; }
        public virtual DbSet<Mst_DocumentMaster> Mst_DocumentMaster { get; set; }
        public virtual DbSet<Mst_Ornament> Mst_Ornament { get; set; }
        public virtual DbSet<Mst_Reason> Mst_Reason { get; set; }
        public virtual DbSet<Mst_AuditCheckList> Mst_AuditCheckList { get; set; }
        public virtual DbSet<Mst_GstMaster> Mst_GstMaster { get; set; }
        public virtual DbSet<Mst_Charge> Mst_Charge { get; set; }
        public virtual DbSet<Mst_ChargeDetails> Mst_ChargeDetails { get; set; }
        public virtual DbSet<Mst_PenaltySlab> Mst_PenaltySlab { get; set; }
        public virtual DbSet<Mst_PurityMaster> Mst_PurityMaster { get; set; }
        public virtual DbSet<tblaccountmaster> tblaccountmasters { get; set; }
        public virtual DbSet<tblGroupMaster> tblGroupMasters { get; set; }
        public virtual DbSet<tblPrimaryGroup> tblPrimaryGroups { get; set; }
        public virtual DbSet<Mst_SchemePurity> Mst_SchemePurity { get; set; }
        public virtual DbSet<Mst_SchemeMaster> Mst_SchemeMaster { get; set; }
        public virtual DbSet<Mst_ProductRate> Mst_ProductRate { get; set; }
    
        public virtual int sp_insertupdateuser(string mode, Nullable<int> id, string username, string password, string emailis, string mobileno, string name, string gender, Nullable<System.DateTime> dob, Nullable<int> usercate)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailisParameter = emailis != null ?
                new ObjectParameter("emailis", emailis) :
                new ObjectParameter("emailis", typeof(string));
    
            var mobilenoParameter = mobileno != null ?
                new ObjectParameter("mobileno", mobileno) :
                new ObjectParameter("mobileno", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var usercateParameter = usercate.HasValue ?
                new ObjectParameter("usercate", usercate) :
                new ObjectParameter("usercate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertupdateuser", modeParameter, idParameter, usernameParameter, passwordParameter, emailisParameter, mobilenoParameter, nameParameter, genderParameter, dobParameter, usercateParameter);
        }
    }
}
